## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  Development tools for My Little Soda multi-agent orchestration
## -------------------------------------------------------------------
[install]
# Core Rust development tools
rustc.pkg-path = "rustc"
cargo.pkg-path = "cargo"
rustfmt.pkg-path = "rustfmt" 
clippy.pkg-path = "clippy"

# Git and GitHub CLI
git.pkg-path = "git"
gh.pkg-path = "gh"

# Docker for Phoenix observability stack
docker.pkg-path = "docker"
docker-compose.pkg-path = "docker-compose"

# Development utilities
jq.pkg-path = "jq"
curl.pkg-path = "curl"
ripgrep.pkg-path = "ripgrep"

# Optional: GUI tools for development
gum.pkg-path = "gum"
openssl_3_0.pkg-path = "openssl_3_0"
pkg-config.pkg-path = "pkg-config"
gcc.pkg-path = "gcc"


## Environment Variables ---------------------------------------------
##  My Little Soda development environment configuration
## -------------------------------------------------------------------
[vars]
MY_LITTLE_SODA_ENV = "development"
RUST_LOG = "info"
RUST_BACKTRACE = "1"

# Phoenix Observability Configuration  
PHOENIX_PORT = "6006"
OTEL_EXPORTER_OTLP_ENDPOINT = "http://localhost:4317"


## Activation Hook ---------------------------------------------------
##  Initialize My Little Soda development environment with smart binary linking
## -------------------------------------------------------------------
[hook]
on-activate = '''
  echo "üöÄ Activating My Little Soda Development Environment"
  
  # Smart binary linking - choose newer of debug vs release
  mkdir -p "$FLOX_ENV_PROJECT/.my-little-soda/bin"
  
  debug_bin="$FLOX_ENV_PROJECT/target/debug/my-little-soda"
  release_bin="$FLOX_ENV_PROJECT/target/release/my-little-soda"
  symlink="$FLOX_ENV_PROJECT/.my-little-soda/bin/my-little-soda"
  
  # Determine which binary to use
  target_bin=""
  if [ -f "$debug_bin" ] && [ -f "$release_bin" ]; then
    # Both exist - choose newer one
    if [ "$debug_bin" -nt "$release_bin" ]; then
      target_bin="$debug_bin"
      build_type="debug"
    else
      target_bin="$release_bin"  
      build_type="release"
    fi
  elif [ -f "$debug_bin" ]; then
    target_bin="$debug_bin"
    build_type="debug"
  elif [ -f "$release_bin" ]; then
    target_bin="$release_bin"
    build_type="release"
  fi
  
  # Create symlink to chosen binary
  if [ -n "$target_bin" ]; then
    ln -sf "$target_bin" "$symlink"
    echo "üîó Linked my-little-soda -> target/$build_type/my-little-soda (newer)"
  else
    echo "‚ö†Ô∏è  No my-little-soda binary found. Run 'cargo build' or 'cargo build --release'"
  fi
  
  echo "‚úÖ My Little Soda environment ready!"
  echo "üí° Auto-detection enabled - works in any GitHub repo with 'gh auth login'"
'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
common = '''
  # Add my-little-soda to PATH (symlink points to newer build automatically)
  if [ -f "$FLOX_ENV_PROJECT/.my-little-soda/bin/my-little-soda" ]; then
    export PATH="$FLOX_ENV_PROJECT/.my-little-soda/bin:$PATH"
  fi
  
  # Clear any GITHUB_TOKEN that might interfere with gh CLI auto-detection
  unset GITHUB_TOKEN
'''
## Shell-specific customizations such as setting aliases go here:
# bash = ...
# zsh  = ...
# fish = ...


## Services ---------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## ------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Build and publish your own packages ------------------------------
##  $ flox build
##  $ flox publish
## ------------------------------------------------------------------
[build]
# [build.myproject]
# description = "The coolest project ever"
# version = "0.0.1"
# command = """
#   mkdir -p $out/bin
#   cargo build --release
#   cp target/release/myproject $out/bin/myproject
# """


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
# systems = [
#   "aarch64-darwin",
#   "aarch64-linux",
#   "x86_64-darwin",
#   "x86_64-linux",
# ]
# Uncomment to disable CUDA detection.
# cuda-detection = false

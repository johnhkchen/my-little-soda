name: Release Binary Assets

# This workflow handles automated binary releases for the my-little-soda project
# It builds cross-platform binaries and creates GitHub releases
#
# TRIGGER CONDITIONS:
# - Version tags: v1.0.0, v2.1.3, v0.1.0-beta.1 (semantic versioning with 'v' prefix)
# - Manual dispatch: For testing and manual releases
#
# TAG PATTERN MATCHING:
# - Matches: v[0-9]+.[0-9]+.[0-9]+           (e.g., v1.0.0, v2.1.3)
# - Matches: v[0-9]+.[0-9]+.[0-9]+-*         (e.g., v1.0.0-beta.1, v2.0.0-rc.1)
# - Ignores: Non-version tags, tags without 'v' prefix, malformed versions
#
# VERSION EXTRACTION:
# - From tags: Strips 'v' prefix (v1.2.3 â†’ 1.2.3)
# - From Cargo.toml: Fallback for manual dispatch
# - Available as: ${{ needs.prepare-release.outputs.version }}

on:
  # Trigger on version tags (v*.*.* pattern)
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'  # Pre-release tags like v1.0.0-beta.1
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run without creating actual release'
        required: false
        default: 'false'
        type: boolean

# Permissions required for creating releases and uploading assets
permissions:
  contents: write
  packages: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  # Binary name from Cargo.toml
  BINARY_NAME: my-little-soda
  # Version information available from Git tag
  # Will be set in prepare-release job

jobs:
  # Placeholder job structure - will be expanded in subsequent tasks
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      release-name: ${{ steps.extract-version.outputs.release-name }}
      tag-name: ${{ steps.extract-version.outputs.tag-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: extract-version
        run: |
          # Extract version from Git tag or Cargo.toml
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # Extract from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Version extracted from tag: ${VERSION}"
          else
            # Fallback to Cargo.toml for workflow_dispatch
            VERSION=$(grep '^version = ' Cargo.toml | head -n1 | cut -d'"' -f2)
            echo "Version extracted from Cargo.toml: ${VERSION}"
          fi
          
          # Set outputs
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release-name=my-little-soda-v${VERSION}" >> $GITHUB_OUTPUT
          echo "tag-name=v${VERSION}" >> $GITHUB_OUTPUT
          
          # Make version available as environment variable for other jobs
          echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV

  # Build matrix for cross-platform binary compilation
  build-matrix:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x86_64
            artifact_name: my-little-soda-linux-x86_64
            executable_suffix: ""
            
          # macOS Intel x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos-x86_64
            artifact_name: my-little-soda-macos-x86_64
            executable_suffix: ""
            
          # macOS Apple Silicon ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-arm64
            artifact_name: my-little-soda-macos-arm64
            executable_suffix: ""
            
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows-x64
            artifact_name: my-little-soda-windows-x64
            executable_suffix: ".exe"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          cache: false

      - name: Configure Rust caching
        uses: Swatinem/rust-cache@v2
        with:
          key: "release-${{ matrix.platform }}-${{ needs.prepare-release.outputs.version }}"
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          cache-all-crates: true

      - name: Extract matrix variables
        id: matrix-vars
        run: |
          echo "target=${{ matrix.target }}" >> $GITHUB_OUTPUT
          echo "platform=${{ matrix.platform }}" >> $GITHUB_OUTPUT
          echo "artifact_name=${{ matrix.artifact_name }}" >> $GITHUB_OUTPUT
          echo "executable_suffix=${{ matrix.executable_suffix }}" >> $GITHUB_OUTPUT
          echo "os=${{ matrix.os }}" >> $GITHUB_OUTPUT
          
          # Make variables available as environment variables
          echo "BUILD_TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo "BUILD_PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ matrix.artifact_name }}" >> $GITHUB_ENV
          echo "EXECUTABLE_SUFFIX=${{ matrix.executable_suffix }}" >> $GITHUB_ENV

      # Linux-specific build configuration
      - name: Configure Linux build environment
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install musl target for static linking (more portable)
          rustup target add x86_64-unknown-linux-musl
          # Install musl-tools for static linking
          sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary for ${{ matrix.platform }}
        run: |
          echo "Building for platform: ${{ matrix.platform }}"
          echo "Rust target: ${{ matrix.target }}"
          echo "Runner OS: ${{ matrix.os }}"
          echo "Artifact name: ${{ matrix.artifact_name }}"
          echo "Version: ${{ needs.prepare-release.outputs.version }}"
          
          # Build the binary with release optimizations
          if [[ "${{ matrix.platform }}" == "linux-x86_64" ]]; then
            # Use musl target for static linking on Linux
            echo "Building statically linked Linux binary..."
            cargo build --release --target x86_64-unknown-linux-musl
            
            # Copy binary to expected location with platform suffix
            mkdir -p target/release-artifacts/
            cp target/x86_64-unknown-linux-musl/release/my-little-soda target/release-artifacts/${{ matrix.artifact_name }}
            
            # Verify binary is statically linked
            echo "Verifying static linking..."
            file target/release-artifacts/${{ matrix.artifact_name }}
            ldd target/release-artifacts/${{ matrix.artifact_name }} || echo "Binary is statically linked (good!)"
          else
            # Standard build for other platforms (will be implemented in subsequent tasks)
            echo "Standard build for ${{ matrix.platform }} - to be implemented in A2b/A2c"
            cargo build --release --target ${{ matrix.target }}
            
            # Copy binary to expected location
            mkdir -p target/release-artifacts/
            cp target/${{ matrix.target }}/release/my-little-soda${{ matrix.executable_suffix }} target/release-artifacts/${{ matrix.artifact_name }}${{ matrix.executable_suffix }}
          fi
          
          # Verify the binary was created
          ls -la target/release-artifacts/
          echo "Binary size: $(du -h target/release-artifacts/${{ matrix.artifact_name }}${{ matrix.executable_suffix }})"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/release-artifacts/${{ matrix.artifact_name }}${{ matrix.executable_suffix }}
          retention-days: 30

  # Placeholder for release creation - will be implemented in A3x tasks
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-matrix]
    steps:
      - name: Placeholder for release creation
        run: echo "Release creation will be implemented in A3a"

  # Placeholder for asset uploads - will be implemented in A3b
  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Placeholder for asset uploads
        run: echo "Asset uploads will be implemented in A3b"

  # Placeholder for release notes - will be implemented in A3c
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Placeholder for release notes
        run: echo "Release notes generation will be implemented in A3c"
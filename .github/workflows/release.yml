name: Release Binary Assets

# This workflow handles automated binary releases for the my-little-soda project
# It builds cross-platform binaries and creates GitHub releases
#
# TRIGGER CONDITIONS:
# - Version tags: v1.0.0, v2.1.3, v0.1.0-beta.1 (semantic versioning with 'v' prefix)
# - Manual dispatch: For testing and manual releases
#
# TAG PATTERN MATCHING:
# - Matches: v[0-9]+.[0-9]+.[0-9]+           (e.g., v1.0.0, v2.1.3)
# - Matches: v[0-9]+.[0-9]+.[0-9]+-*         (e.g., v1.0.0-beta.1, v2.0.0-rc.1)
# - Ignores: Non-version tags, tags without 'v' prefix, malformed versions
#
# VERSION EXTRACTION:
# - From tags: Strips 'v' prefix (v1.2.3 → 1.2.3)
# - From Cargo.toml: Fallback for manual dispatch
# - Available as: ${{ needs.prepare-release.outputs.version }}

on:
  # Trigger on version tags (v*.*.* pattern)
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'  # Pre-release tags like v1.0.0-beta.1
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run without creating actual release'
        required: false
        default: 'false'
        type: boolean

# Permissions required for creating releases and uploading assets
permissions:
  contents: write
  packages: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  # Binary name from Cargo.toml
  BINARY_NAME: my-little-soda
  # Allow warnings during build (remove -D warnings flag)
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  RUST_BACKTRACE: short
  # RUSTFLAGS: -D warnings  # Temporarily disabled for testing
  CARGO_UNSTABLE_SPARSE_REGISTRY: true
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  CACHE_ON_FAILURE: false
  # Version information available from Git tag
  # Will be set in prepare-release job

jobs:
  # Placeholder job structure - will be expanded in subsequent tasks
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      release-name: ${{ steps.extract-version.outputs.release-name }}
      tag-name: ${{ steps.extract-version.outputs.tag-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: extract-version
        run: |
          # Extract version from Git tag or Cargo.toml
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # Extract from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Version extracted from tag: ${VERSION}"
          else
            # Fallback to Cargo.toml for workflow_dispatch
            VERSION=$(grep '^version = ' Cargo.toml | head -n1 | cut -d'"' -f2)
            echo "Version extracted from Cargo.toml: ${VERSION}"
          fi
          
          # Set outputs
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release-name=my-little-soda-v${VERSION}" >> $GITHUB_OUTPUT
          echo "tag-name=v${VERSION}" >> $GITHUB_OUTPUT
          
          # Make version available as environment variable for other jobs
          echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV

  # Build matrix for cross-platform binary compilation
  build-matrix:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x86_64
            artifact_name: my-little-soda-linux-x86_64
            executable_suffix: ""
            
          # macOS Intel x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos-x86_64
            artifact_name: my-little-soda-macos-x86_64
            executable_suffix: ""
            
          # macOS Apple Silicon ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-arm64
            artifact_name: my-little-soda-macos-arm64
            executable_suffix: ""
            
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows-x64
            artifact_name: my-little-soda-windows-x64
            executable_suffix: ".exe"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          cache: false
          rustflags: ""

      - name: Configure Rust caching
        uses: Swatinem/rust-cache@v2
        with:
          key: "release-${{ matrix.platform }}-${{ needs.prepare-release.outputs.version }}"
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          cache-all-crates: true

      - name: Extract matrix variables
        id: matrix-vars
        run: |
          echo "target=${{ matrix.target }}" >> $GITHUB_OUTPUT
          echo "platform=${{ matrix.platform }}" >> $GITHUB_OUTPUT
          echo "artifact_name=${{ matrix.artifact_name }}" >> $GITHUB_OUTPUT
          echo "executable_suffix=${{ matrix.executable_suffix }}" >> $GITHUB_OUTPUT
          echo "os=${{ matrix.os }}" >> $GITHUB_OUTPUT
          
          # Make variables available as environment variables
          echo "BUILD_TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo "BUILD_PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ matrix.artifact_name }}" >> $GITHUB_ENV
          echo "EXECUTABLE_SUFFIX=${{ matrix.executable_suffix }}" >> $GITHUB_ENV

      # Linux-specific build configuration
      - name: Configure Linux build environment
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Use standard glibc build instead of musl to avoid OpenSSL issues
          echo "Using standard Linux build (glibc) instead of musl for compatibility"
          
          # Install required packages for OpenSSL
          sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      # macOS-specific build configuration
      - name: Configure macOS build environment
        if: matrix.os == 'macos-latest'
        run: |
          # Install and configure OpenSSL for cross-compilation
          echo "Setting up macOS build environment for ${{ matrix.target }}"
          
          # Ensure Homebrew OpenSSL is available
          brew install openssl@3 pkg-config
          
          # For cross-compilation to x86_64 on ARM64 runner, use vendored OpenSSL
          if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
            echo "Configuring cross-compilation for x86_64 on ARM64 with vendored OpenSSL"
            # Use vendored OpenSSL to avoid architecture mismatch - set it globally for this target
            echo "OPENSSL_VENDORED=1" >> $GITHUB_ENV
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=" >> $GITHUB_ENV
            echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=10.12" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          else
            # For native ARM64 build, use system OpenSSL
            OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)
            PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig
            
            echo "OPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}" >> $GITHUB_ENV
            echo "OPENSSL_DIR=${OPENSSL_ROOT_DIR}" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:$PKG_CONFIG_PATH" >> $GITHUB_ENV
            
            # Verify OpenSSL installation
            echo "OpenSSL version: $(${OPENSSL_ROOT_DIR}/bin/openssl version)"
            echo "OpenSSL directory: ${OPENSSL_ROOT_DIR}"
            ls -la ${OPENSSL_ROOT_DIR}/lib/ | head -5
          fi

      # Windows-specific build configuration
      - name: Configure Windows build environment
        if: matrix.os == 'windows-latest'
        run: |
          # Verify Windows MSVC toolchain is available
          echo "Windows MSVC target: ${{ matrix.target }}"
          echo "Visual Studio components:"
          # List installed VS components for debugging
          Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*Visual Studio*" } | Select-Object Name, Version

      # Linux/macOS build
      - name: Build binary for Linux/macOS
        if: matrix.os != 'windows-latest'
        env:
          RUSTFLAGS: ""  # Override to allow warnings for testing
        run: |
          echo "Building for platform: ${{ matrix.platform }}"
          echo "Rust target: ${{ matrix.target }}"
          echo "Runner OS: ${{ matrix.os }}"
          echo "Artifact name: ${{ matrix.artifact_name }}"
          echo "Version: ${{ needs.prepare-release.outputs.version }}"
          
          # Build the binary with release optimizations for all platforms
          echo "Standard build for ${{ matrix.platform }}"
          cargo build --release --target ${{ matrix.target }}
          
          # Copy binary to expected location
          mkdir -p target/release-artifacts/
          cp target/${{ matrix.target }}/release/my-little-soda${{ matrix.executable_suffix }} target/release-artifacts/${{ matrix.artifact_name }}${{ matrix.executable_suffix }}
          
          # For Linux, show linking information
          if [[ "${{ matrix.platform }}" == "linux-x86_64" ]]; then
            echo "Verifying Linux binary..."
            file target/release-artifacts/${{ matrix.artifact_name }}
            echo "Dynamic library dependencies:"
            ldd target/release-artifacts/${{ matrix.artifact_name }} | head -10
          fi
          
          # Verify the binary was created
          ls -la target/release-artifacts/
          echo "Binary size: $(du -h target/release-artifacts/${{ matrix.artifact_name }}${{ matrix.executable_suffix }})"

      # Windows build
      - name: Build binary for Windows
        if: matrix.os == 'windows-latest'
        env:
          RUSTFLAGS: ""  # Override to allow warnings for testing
        run: |
          Write-Host "Building for platform: ${{ matrix.platform }}"
          Write-Host "Rust target: ${{ matrix.target }}"
          Write-Host "Runner OS: ${{ matrix.os }}"
          Write-Host "Artifact name: ${{ matrix.artifact_name }}"
          Write-Host "Version: ${{ needs.prepare-release.outputs.version }}"
          
          # Windows MSVC build with optimizations
          Write-Host "Building Windows x64 binary with MSVC..."
          cargo build --release --target ${{ matrix.target }}
          
          # Create artifacts directory
          New-Item -ItemType Directory -Force -Path target/release-artifacts/
          
          # Copy Windows binary with .exe extension
          Copy-Item "target/${{ matrix.target }}/release/my-little-soda.exe" "target/release-artifacts/${{ matrix.artifact_name }}.exe"
          
          # Verify Windows binary properties
          Write-Host "Verifying Windows binary..."
          Get-ItemProperty "target/release-artifacts/${{ matrix.artifact_name }}.exe" | Select-Object Name, Length, VersionInfo
          
          # Verify the binary was created
          Get-ChildItem target/release-artifacts/ | Format-Table
          $fileSize = (Get-Item "target/release-artifacts/${{ matrix.artifact_name }}.exe").Length / 1MB
          Write-Host "Binary size: $([math]::Round($fileSize, 2)) MB"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/release-artifacts/${{ matrix.artifact_name }}${{ matrix.executable_suffix }}
          retention-days: 30

  # Create GitHub Release with metadata
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-matrix]
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: generate-notes
        run: |
          # Generate automated release notes from commits and PRs since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_VERSION="${{ needs.prepare-release.outputs.version }}"
          
          echo "# Release v${CURRENT_VERSION}" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$LAST_TAG" ]; then
            echo "## What's Changed" >> release_notes.md
            echo "" >> release_notes.md
            
            # Get commits since last tag and categorize them
            MERGE_COMMITS=$(git log --pretty=format:"%s|%H|%an|%ae" ${LAST_TAG}..HEAD --grep="Merge" --grep="merge" -i)
            FEATURE_COMMITS=$(git log --pretty=format:"%s|%H|%an|%ae" ${LAST_TAG}..HEAD --grep="feat" --grep="add" --grep="implement" -i --invert-grep --grep="Merge" --invert-grep --grep="merge")
            FIX_COMMITS=$(git log --pretty=format:"%s|%H|%an|%ae" ${LAST_TAG}..HEAD --grep="fix" --grep="bug" --grep="patch" -i --invert-grep --grep="Merge" --invert-grep --grep="merge")
            OTHER_COMMITS=$(git log --pretty=format:"%s|%H|%an|%ae" ${LAST_TAG}..HEAD --invert-grep --grep="feat" --invert-grep --grep="add" --invert-grep --grep="implement" --invert-grep --grep="fix" --invert-grep --grep="bug" --invert-grep --grep="patch" --invert-grep --grep="Merge" --invert-grep --grep="merge")
            
            # Process feature commits
            if [ -n "$FEATURE_COMMITS" ]; then
              echo "### ✨ New Features" >> release_notes.md
              echo "$FEATURE_COMMITS" | while IFS='|' read -r subject hash author email; do
                if [ -n "$subject" ]; then
                  # Clean up commit message and format nicely
                  CLEAN_SUBJECT=$(echo "$subject" | sed 's/^[Ff]eat[^:]*: *//' | sed 's/^[Aa]dd[^:]*: *//' | sed 's/^[Ii]mplement[^:]*: *//')
                  echo "- ${CLEAN_SUBJECT} ([${hash:0:7}](https://github.com/johnhkchen/my-little-soda/commit/${hash}))" >> release_notes.md
                fi
              done
              echo "" >> release_notes.md
            fi
            
            # Process bug fixes
            if [ -n "$FIX_COMMITS" ]; then
              echo "### 🐛 Bug Fixes" >> release_notes.md
              echo "$FIX_COMMITS" | while IFS='|' read -r subject hash author email; do
                if [ -n "$subject" ]; then
                  CLEAN_SUBJECT=$(echo "$subject" | sed 's/^[Ff]ix[^:]*: *//' | sed 's/^[Bb]ug[^:]*: *//' | sed 's/^[Pp]atch[^:]*: *//')
                  echo "- ${CLEAN_SUBJECT} ([${hash:0:7}](https://github.com/johnhkchen/my-little-soda/commit/${hash}))" >> release_notes.md
                fi
              done
              echo "" >> release_notes.md
            fi
            
            # Process other changes
            if [ -n "$OTHER_COMMITS" ]; then
              echo "### 🔧 Other Changes" >> release_notes.md
              echo "$OTHER_COMMITS" | while IFS='|' read -r subject hash author email; do
                if [ -n "$subject" ]; then
                  echo "- ${subject} ([${hash:0:7}](https://github.com/johnhkchen/my-little-soda/commit/${hash}))" >> release_notes.md
                fi
              done
              echo "" >> release_notes.md
            fi
            
            # Add contributor acknowledgments
            echo "### 🙏 Contributors" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"%an|%ae" ${LAST_TAG}..HEAD | sort | uniq | while IFS='|' read -r name email; do
              if [ -n "$name" ] && [ "$name" != "GitHub" ]; then
                echo "- [@${name}](mailto:${email})" >> release_notes.md
              fi
            done
            echo "" >> release_notes.md
            
          else
            echo "## What's Changed" >> release_notes.md
            echo "" >> release_notes.md
            echo "### ✨ Initial Release" >> release_notes.md
            echo "- First release of My Little Soda autonomous coding agent" >> release_notes.md
            echo "- Multi-agent orchestration system for GitHub issue processing" >> release_notes.md
            echo "- Cross-platform binary support (Linux, macOS, Windows)" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add download and installation instructions
          cat >> release_notes.md << 'EOF'
          ## 📦 Installation
          
          Download the appropriate binary for your platform from the assets below:
          
          ### Linux (x86_64)
          ```bash
          # Download
          wget https://github.com/johnhkchen/my-little-soda/releases/latest/download/my-little-soda-linux-x86_64
          
          # Make executable and install
          chmod +x my-little-soda-linux-x86_64
          sudo mv my-little-soda-linux-x86_64 /usr/local/bin/my-little-soda
          
          # Verify installation
          my-little-soda --version
          ```
          
          ### macOS (Intel & Apple Silicon)
          ```bash
          # For Intel Macs
          wget https://github.com/johnhkchen/my-little-soda/releases/latest/download/my-little-soda-macos-x86_64
          
          # For Apple Silicon Macs  
          wget https://github.com/johnhkchen/my-little-soda/releases/latest/download/my-little-soda-macos-arm64
          
          # Make executable and install
          chmod +x my-little-soda-macos-*
          sudo mv my-little-soda-macos-* /usr/local/bin/my-little-soda
          
          # Verify installation
          my-little-soda --version
          ```
          
          ### Windows (x64)
          ```powershell
          # Download my-little-soda-windows-x64.exe from the assets
          # Place in a directory in your PATH or rename to my-little-soda.exe
          
          # Verify installation
          my-little-soda.exe --version
          ```
          
          ## 🔐 Verification
          
          All binaries include SHA256 and MD5 checksums for integrity verification:
          
          ```bash
          # Verify SHA256 checksum
          sha256sum my-little-soda-* && cat my-little-soda-*.sha256
          
          # Verify MD5 checksum  
          md5sum my-little-soda-* && cat my-little-soda-*.md5
          ```
          EOF
          
          # Set release notes as output
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag-name }}
          name: "${{ needs.prepare-release.outputs.release-name }}"
          body: ${{ steps.generate-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.tag-name, '-') }}

  # Upload compiled binaries as release assets
  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [prepare-release, build-matrix]
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/
          merge-multiple: true

      - name: Generate checksums for all binaries
        run: |
          cd artifacts/
          echo "Generating checksums for all binaries..."
          
          for binary in my-little-soda-*; do
            if [[ -f "$binary" && "$binary" != *.sha256 && "$binary" != *.md5 ]]; then
              echo "Processing $binary"
              
              # Generate SHA256 checksum
              sha256sum "$binary" > "$binary.sha256"
              
              # Generate MD5 checksum
              md5sum "$binary" > "$binary.md5"
              
              # Display checksums
              SHA256_CHECKSUM=$(sha256sum "$binary" | cut -d' ' -f1)
              MD5_CHECKSUM=$(md5sum "$binary" | cut -d' ' -f1)
              echo "  SHA256: ${SHA256_CHECKSUM}"
              echo "  MD5: ${MD5_CHECKSUM}"
            fi
          done
          
          echo "All checksums generated:"
          ls -la

      - name: Upload all assets to release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag-name }}
          files: ./artifacts/*
          fail_on_unmatched_files: true

